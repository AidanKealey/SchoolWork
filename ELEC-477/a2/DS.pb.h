// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS.proto

#ifndef PROTOBUF_INCLUDED_DS_2eproto
#define PROTOBUF_INCLUDED_DS_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DS_2eproto 

namespace protobuf_DS_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DS_2eproto
namespace DSMessageHandler {
class DSRequest;
class DSRequestDefaultTypeInternal;
extern DSRequestDefaultTypeInternal _DSRequest_default_instance_;
class DSResponse;
class DSResponseDefaultTypeInternal;
extern DSResponseDefaultTypeInternal _DSResponse_default_instance_;
class deleteServerRequest;
class deleteServerRequestDefaultTypeInternal;
extern deleteServerRequestDefaultTypeInternal _deleteServerRequest_default_instance_;
class deleteServerResponse;
class deleteServerResponseDefaultTypeInternal;
extern deleteServerResponseDefaultTypeInternal _deleteServerResponse_default_instance_;
class registerServerRequest;
class registerServerRequestDefaultTypeInternal;
extern registerServerRequestDefaultTypeInternal _registerServerRequest_default_instance_;
class registerServerResponse;
class registerServerResponseDefaultTypeInternal;
extern registerServerResponseDefaultTypeInternal _registerServerResponse_default_instance_;
class searchServerRequest;
class searchServerRequestDefaultTypeInternal;
extern searchServerRequestDefaultTypeInternal _searchServerRequest_default_instance_;
class searchServerResponse;
class searchServerResponseDefaultTypeInternal;
extern searchServerResponseDefaultTypeInternal _searchServerResponse_default_instance_;
}  // namespace DSMessageHandler
namespace google {
namespace protobuf {
template<> ::DSMessageHandler::DSRequest* Arena::CreateMaybeMessage<::DSMessageHandler::DSRequest>(Arena*);
template<> ::DSMessageHandler::DSResponse* Arena::CreateMaybeMessage<::DSMessageHandler::DSResponse>(Arena*);
template<> ::DSMessageHandler::deleteServerRequest* Arena::CreateMaybeMessage<::DSMessageHandler::deleteServerRequest>(Arena*);
template<> ::DSMessageHandler::deleteServerResponse* Arena::CreateMaybeMessage<::DSMessageHandler::deleteServerResponse>(Arena*);
template<> ::DSMessageHandler::registerServerRequest* Arena::CreateMaybeMessage<::DSMessageHandler::registerServerRequest>(Arena*);
template<> ::DSMessageHandler::registerServerResponse* Arena::CreateMaybeMessage<::DSMessageHandler::registerServerResponse>(Arena*);
template<> ::DSMessageHandler::searchServerRequest* Arena::CreateMaybeMessage<::DSMessageHandler::searchServerRequest>(Arena*);
template<> ::DSMessageHandler::searchServerResponse* Arena::CreateMaybeMessage<::DSMessageHandler::searchServerResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace DSMessageHandler {

// ===================================================================

class DSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.DSRequest) */ {
 public:
  DSRequest();
  virtual ~DSRequest();

  DSRequest(const DSRequest& from);

  inline DSRequest& operator=(const DSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSRequest(DSRequest&& from) noexcept
    : DSRequest() {
    *this = ::std::move(from);
  }

  inline DSRequest& operator=(DSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DSRequest& default_instance();

  enum FunctionCase {
    kRegisterServerArgs = 4,
    kSearchServerArgs = 5,
    kDeleteServerArgs = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSRequest* internal_default_instance() {
    return reinterpret_cast<const DSRequest*>(
               &_DSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DSRequest* other);
  friend void swap(DSRequest& a, DSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSRequest* New() const final {
    return CreateMaybeMessage<DSRequest>(NULL);
  }

  DSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSRequest& from);
  void MergeFrom(const DSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .DSMessageHandler.registerServerRequest registerServerArgs = 4;
  bool has_registerserverargs() const;
  void clear_registerserverargs();
  static const int kRegisterServerArgsFieldNumber = 4;
  private:
  const ::DSMessageHandler::registerServerRequest& _internal_registerserverargs() const;
  public:
  const ::DSMessageHandler::registerServerRequest& registerserverargs() const;
  ::DSMessageHandler::registerServerRequest* release_registerserverargs();
  ::DSMessageHandler::registerServerRequest* mutable_registerserverargs();
  void set_allocated_registerserverargs(::DSMessageHandler::registerServerRequest* registerserverargs);

  // .DSMessageHandler.searchServerRequest searchServerArgs = 5;
  bool has_searchserverargs() const;
  void clear_searchserverargs();
  static const int kSearchServerArgsFieldNumber = 5;
  private:
  const ::DSMessageHandler::searchServerRequest& _internal_searchserverargs() const;
  public:
  const ::DSMessageHandler::searchServerRequest& searchserverargs() const;
  ::DSMessageHandler::searchServerRequest* release_searchserverargs();
  ::DSMessageHandler::searchServerRequest* mutable_searchserverargs();
  void set_allocated_searchserverargs(::DSMessageHandler::searchServerRequest* searchserverargs);

  // .DSMessageHandler.deleteServerRequest deleteServerArgs = 6;
  bool has_deleteserverargs() const;
  void clear_deleteserverargs();
  static const int kDeleteServerArgsFieldNumber = 6;
  private:
  const ::DSMessageHandler::deleteServerRequest& _internal_deleteserverargs() const;
  public:
  const ::DSMessageHandler::deleteServerRequest& deleteserverargs() const;
  ::DSMessageHandler::deleteServerRequest* release_deleteserverargs();
  ::DSMessageHandler::deleteServerRequest* mutable_deleteserverargs();
  void set_allocated_deleteserverargs(::DSMessageHandler::deleteServerRequest* deleteserverargs);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:DSMessageHandler.DSRequest)
 private:
  void set_has_registerserverargs();
  void set_has_searchserverargs();
  void set_has_deleteserverargs();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::DSMessageHandler::registerServerRequest* registerserverargs_;
    ::DSMessageHandler::searchServerRequest* searchserverargs_;
    ::DSMessageHandler::deleteServerRequest* deleteserverargs_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.registerServerRequest) */ {
 public:
  registerServerRequest();
  virtual ~registerServerRequest();

  registerServerRequest(const registerServerRequest& from);

  inline registerServerRequest& operator=(const registerServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerServerRequest(registerServerRequest&& from) noexcept
    : registerServerRequest() {
    *this = ::std::move(from);
  }

  inline registerServerRequest& operator=(registerServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerServerRequest* internal_default_instance() {
    return reinterpret_cast<const registerServerRequest*>(
               &_registerServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(registerServerRequest* other);
  friend void swap(registerServerRequest& a, registerServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerServerRequest* New() const final {
    return CreateMaybeMessage<registerServerRequest>(NULL);
  }

  registerServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerServerRequest& from);
  void MergeFrom(const registerServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // string serverName = 2;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.registerServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class searchServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.searchServerRequest) */ {
 public:
  searchServerRequest();
  virtual ~searchServerRequest();

  searchServerRequest(const searchServerRequest& from);

  inline searchServerRequest& operator=(const searchServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  searchServerRequest(searchServerRequest&& from) noexcept
    : searchServerRequest() {
    *this = ::std::move(from);
  }

  inline searchServerRequest& operator=(searchServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const searchServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchServerRequest* internal_default_instance() {
    return reinterpret_cast<const searchServerRequest*>(
               &_searchServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(searchServerRequest* other);
  friend void swap(searchServerRequest& a, searchServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline searchServerRequest* New() const final {
    return CreateMaybeMessage<searchServerRequest>(NULL);
  }

  searchServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<searchServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const searchServerRequest& from);
  void MergeFrom(const searchServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverName = 1;
  void clear_servername();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.searchServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.deleteServerRequest) */ {
 public:
  deleteServerRequest();
  virtual ~deleteServerRequest();

  deleteServerRequest(const deleteServerRequest& from);

  inline deleteServerRequest& operator=(const deleteServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteServerRequest(deleteServerRequest&& from) noexcept
    : deleteServerRequest() {
    *this = ::std::move(from);
  }

  inline deleteServerRequest& operator=(deleteServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteServerRequest* internal_default_instance() {
    return reinterpret_cast<const deleteServerRequest*>(
               &_deleteServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(deleteServerRequest* other);
  friend void swap(deleteServerRequest& a, deleteServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteServerRequest* New() const final {
    return CreateMaybeMessage<deleteServerRequest>(NULL);
  }

  deleteServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteServerRequest& from);
  void MergeFrom(const deleteServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverName = 1;
  void clear_servername();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.deleteServerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DSResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.DSResponse) */ {
 public:
  DSResponse();
  virtual ~DSResponse();

  DSResponse(const DSResponse& from);

  inline DSResponse& operator=(const DSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSResponse(DSResponse&& from) noexcept
    : DSResponse() {
    *this = ::std::move(from);
  }

  inline DSResponse& operator=(DSResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DSResponse& default_instance();

  enum FunctionCase {
    kRegisterServerRes = 4,
    kSearchServerRes = 5,
    kDeleteServerRes = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSResponse* internal_default_instance() {
    return reinterpret_cast<const DSResponse*>(
               &_DSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DSResponse* other);
  friend void swap(DSResponse& a, DSResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSResponse* New() const final {
    return CreateMaybeMessage<DSResponse>(NULL);
  }

  DSResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSResponse& from);
  void MergeFrom(const DSResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .DSMessageHandler.registerServerResponse registerServerRes = 4;
  bool has_registerserverres() const;
  void clear_registerserverres();
  static const int kRegisterServerResFieldNumber = 4;
  private:
  const ::DSMessageHandler::registerServerResponse& _internal_registerserverres() const;
  public:
  const ::DSMessageHandler::registerServerResponse& registerserverres() const;
  ::DSMessageHandler::registerServerResponse* release_registerserverres();
  ::DSMessageHandler::registerServerResponse* mutable_registerserverres();
  void set_allocated_registerserverres(::DSMessageHandler::registerServerResponse* registerserverres);

  // .DSMessageHandler.searchServerResponse searchServerRes = 5;
  bool has_searchserverres() const;
  void clear_searchserverres();
  static const int kSearchServerResFieldNumber = 5;
  private:
  const ::DSMessageHandler::searchServerResponse& _internal_searchserverres() const;
  public:
  const ::DSMessageHandler::searchServerResponse& searchserverres() const;
  ::DSMessageHandler::searchServerResponse* release_searchserverres();
  ::DSMessageHandler::searchServerResponse* mutable_searchserverres();
  void set_allocated_searchserverres(::DSMessageHandler::searchServerResponse* searchserverres);

  // .DSMessageHandler.deleteServerResponse deleteServerRes = 6;
  bool has_deleteserverres() const;
  void clear_deleteserverres();
  static const int kDeleteServerResFieldNumber = 6;
  private:
  const ::DSMessageHandler::deleteServerResponse& _internal_deleteserverres() const;
  public:
  const ::DSMessageHandler::deleteServerResponse& deleteserverres() const;
  ::DSMessageHandler::deleteServerResponse* release_deleteserverres();
  ::DSMessageHandler::deleteServerResponse* mutable_deleteserverres();
  void set_allocated_deleteserverres(::DSMessageHandler::deleteServerResponse* deleteserverres);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:DSMessageHandler.DSResponse)
 private:
  void set_has_registerserverres();
  void set_has_searchserverres();
  void set_has_deleteserverres();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::DSMessageHandler::registerServerResponse* registerserverres_;
    ::DSMessageHandler::searchServerResponse* searchserverres_;
    ::DSMessageHandler::deleteServerResponse* deleteserverres_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.registerServerResponse) */ {
 public:
  registerServerResponse();
  virtual ~registerServerResponse();

  registerServerResponse(const registerServerResponse& from);

  inline registerServerResponse& operator=(const registerServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerServerResponse(registerServerResponse&& from) noexcept
    : registerServerResponse() {
    *this = ::std::move(from);
  }

  inline registerServerResponse& operator=(registerServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerServerResponse* internal_default_instance() {
    return reinterpret_cast<const registerServerResponse*>(
               &_registerServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(registerServerResponse* other);
  friend void swap(registerServerResponse& a, registerServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerServerResponse* New() const final {
    return CreateMaybeMessage<registerServerResponse>(NULL);
  }

  registerServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerServerResponse& from);
  void MergeFrom(const registerServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.registerServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class searchServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.searchServerResponse) */ {
 public:
  searchServerResponse();
  virtual ~searchServerResponse();

  searchServerResponse(const searchServerResponse& from);

  inline searchServerResponse& operator=(const searchServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  searchServerResponse(searchServerResponse&& from) noexcept
    : searchServerResponse() {
    *this = ::std::move(from);
  }

  inline searchServerResponse& operator=(searchServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const searchServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchServerResponse* internal_default_instance() {
    return reinterpret_cast<const searchServerResponse*>(
               &_searchServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(searchServerResponse* other);
  friend void swap(searchServerResponse& a, searchServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline searchServerResponse* New() const final {
    return CreateMaybeMessage<searchServerResponse>(NULL);
  }

  searchServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<searchServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const searchServerResponse& from);
  void MergeFrom(const searchServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverName = 2;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // bool found = 1;
  void clear_found();
  static const int kFoundFieldNumber = 1;
  bool found() const;
  void set_found(bool value);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.searchServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  bool found_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DSMessageHandler.deleteServerResponse) */ {
 public:
  deleteServerResponse();
  virtual ~deleteServerResponse();

  deleteServerResponse(const deleteServerResponse& from);

  inline deleteServerResponse& operator=(const deleteServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteServerResponse(deleteServerResponse&& from) noexcept
    : deleteServerResponse() {
    *this = ::std::move(from);
  }

  inline deleteServerResponse& operator=(deleteServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteServerResponse* internal_default_instance() {
    return reinterpret_cast<const deleteServerResponse*>(
               &_deleteServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(deleteServerResponse* other);
  friend void swap(deleteServerResponse& a, deleteServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteServerResponse* New() const final {
    return CreateMaybeMessage<deleteServerResponse>(NULL);
  }

  deleteServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteServerResponse& from);
  void MergeFrom(const deleteServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:DSMessageHandler.deleteServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DSRequest

// uint32 magic = 1;
inline void DSRequest::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::magic() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.magic)
  return magic_;
}
inline void DSRequest::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSRequest.magic)
}

// uint32 version = 2;
inline void DSRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::version() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.version)
  return version_;
}
inline void DSRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSRequest.version)
}

// uint32 serial = 3;
inline void DSRequest::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::serial() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.serial)
  return serial_;
}
inline void DSRequest::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSRequest.serial)
}

// .DSMessageHandler.registerServerRequest registerServerArgs = 4;
inline bool DSRequest::has_registerserverargs() const {
  return function_case() == kRegisterServerArgs;
}
inline void DSRequest::set_has_registerserverargs() {
  _oneof_case_[0] = kRegisterServerArgs;
}
inline void DSRequest::clear_registerserverargs() {
  if (has_registerserverargs()) {
    delete function_.registerserverargs_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::registerServerRequest& DSRequest::_internal_registerserverargs() const {
  return *function_.registerserverargs_;
}
inline ::DSMessageHandler::registerServerRequest* DSRequest::release_registerserverargs() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSRequest.registerServerArgs)
  if (has_registerserverargs()) {
    clear_has_function();
      ::DSMessageHandler::registerServerRequest* temp = function_.registerserverargs_;
    function_.registerserverargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::registerServerRequest& DSRequest::registerserverargs() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.registerServerArgs)
  return has_registerserverargs()
      ? *function_.registerserverargs_
      : *reinterpret_cast< ::DSMessageHandler::registerServerRequest*>(&::DSMessageHandler::_registerServerRequest_default_instance_);
}
inline ::DSMessageHandler::registerServerRequest* DSRequest::mutable_registerserverargs() {
  if (!has_registerserverargs()) {
    clear_function();
    set_has_registerserverargs();
    function_.registerserverargs_ = CreateMaybeMessage< ::DSMessageHandler::registerServerRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSRequest.registerServerArgs)
  return function_.registerserverargs_;
}

// .DSMessageHandler.searchServerRequest searchServerArgs = 5;
inline bool DSRequest::has_searchserverargs() const {
  return function_case() == kSearchServerArgs;
}
inline void DSRequest::set_has_searchserverargs() {
  _oneof_case_[0] = kSearchServerArgs;
}
inline void DSRequest::clear_searchserverargs() {
  if (has_searchserverargs()) {
    delete function_.searchserverargs_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::searchServerRequest& DSRequest::_internal_searchserverargs() const {
  return *function_.searchserverargs_;
}
inline ::DSMessageHandler::searchServerRequest* DSRequest::release_searchserverargs() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSRequest.searchServerArgs)
  if (has_searchserverargs()) {
    clear_has_function();
      ::DSMessageHandler::searchServerRequest* temp = function_.searchserverargs_;
    function_.searchserverargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::searchServerRequest& DSRequest::searchserverargs() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.searchServerArgs)
  return has_searchserverargs()
      ? *function_.searchserverargs_
      : *reinterpret_cast< ::DSMessageHandler::searchServerRequest*>(&::DSMessageHandler::_searchServerRequest_default_instance_);
}
inline ::DSMessageHandler::searchServerRequest* DSRequest::mutable_searchserverargs() {
  if (!has_searchserverargs()) {
    clear_function();
    set_has_searchserverargs();
    function_.searchserverargs_ = CreateMaybeMessage< ::DSMessageHandler::searchServerRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSRequest.searchServerArgs)
  return function_.searchserverargs_;
}

// .DSMessageHandler.deleteServerRequest deleteServerArgs = 6;
inline bool DSRequest::has_deleteserverargs() const {
  return function_case() == kDeleteServerArgs;
}
inline void DSRequest::set_has_deleteserverargs() {
  _oneof_case_[0] = kDeleteServerArgs;
}
inline void DSRequest::clear_deleteserverargs() {
  if (has_deleteserverargs()) {
    delete function_.deleteserverargs_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::deleteServerRequest& DSRequest::_internal_deleteserverargs() const {
  return *function_.deleteserverargs_;
}
inline ::DSMessageHandler::deleteServerRequest* DSRequest::release_deleteserverargs() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSRequest.deleteServerArgs)
  if (has_deleteserverargs()) {
    clear_has_function();
      ::DSMessageHandler::deleteServerRequest* temp = function_.deleteserverargs_;
    function_.deleteserverargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::deleteServerRequest& DSRequest::deleteserverargs() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSRequest.deleteServerArgs)
  return has_deleteserverargs()
      ? *function_.deleteserverargs_
      : *reinterpret_cast< ::DSMessageHandler::deleteServerRequest*>(&::DSMessageHandler::_deleteServerRequest_default_instance_);
}
inline ::DSMessageHandler::deleteServerRequest* DSRequest::mutable_deleteserverargs() {
  if (!has_deleteserverargs()) {
    clear_function();
    set_has_deleteserverargs();
    function_.deleteserverargs_ = CreateMaybeMessage< ::DSMessageHandler::deleteServerRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSRequest.deleteServerArgs)
  return function_.deleteserverargs_;
}

inline bool DSRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void DSRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline DSRequest::FunctionCase DSRequest::function_case() const {
  return DSRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerServerRequest

// string serviceName = 1;
inline void registerServerRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerServerRequest::servicename() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.registerServerRequest.serviceName)
  return servicename_.GetNoArena();
}
inline void registerServerRequest::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSMessageHandler.registerServerRequest.serviceName)
}
#if LANG_CXX11
inline void registerServerRequest::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSMessageHandler.registerServerRequest.serviceName)
}
#endif
inline void registerServerRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSMessageHandler.registerServerRequest.serviceName)
}
inline void registerServerRequest::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSMessageHandler.registerServerRequest.serviceName)
}
inline ::std::string* registerServerRequest::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.registerServerRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerServerRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.registerServerRequest.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerServerRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:DSMessageHandler.registerServerRequest.serviceName)
}

// string serverName = 2;
inline void registerServerRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerServerRequest::servername() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.registerServerRequest.serverName)
  return servername_.GetNoArena();
}
inline void registerServerRequest::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSMessageHandler.registerServerRequest.serverName)
}
#if LANG_CXX11
inline void registerServerRequest::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSMessageHandler.registerServerRequest.serverName)
}
#endif
inline void registerServerRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSMessageHandler.registerServerRequest.serverName)
}
inline void registerServerRequest::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSMessageHandler.registerServerRequest.serverName)
}
inline ::std::string* registerServerRequest::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.registerServerRequest.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerServerRequest::release_servername() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.registerServerRequest.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerServerRequest::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:DSMessageHandler.registerServerRequest.serverName)
}

// int32 port = 3;
inline void registerServerRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 registerServerRequest::port() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.registerServerRequest.port)
  return port_;
}
inline void registerServerRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.registerServerRequest.port)
}

// -------------------------------------------------------------------

// searchServerRequest

// string serverName = 1;
inline void searchServerRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& searchServerRequest::servername() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.searchServerRequest.serverName)
  return servername_.GetNoArena();
}
inline void searchServerRequest::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSMessageHandler.searchServerRequest.serverName)
}
#if LANG_CXX11
inline void searchServerRequest::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSMessageHandler.searchServerRequest.serverName)
}
#endif
inline void searchServerRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSMessageHandler.searchServerRequest.serverName)
}
inline void searchServerRequest::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSMessageHandler.searchServerRequest.serverName)
}
inline ::std::string* searchServerRequest::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.searchServerRequest.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* searchServerRequest::release_servername() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.searchServerRequest.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchServerRequest::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:DSMessageHandler.searchServerRequest.serverName)
}

// -------------------------------------------------------------------

// deleteServerRequest

// string serverName = 1;
inline void deleteServerRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteServerRequest::servername() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.deleteServerRequest.serverName)
  return servername_.GetNoArena();
}
inline void deleteServerRequest::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSMessageHandler.deleteServerRequest.serverName)
}
#if LANG_CXX11
inline void deleteServerRequest::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSMessageHandler.deleteServerRequest.serverName)
}
#endif
inline void deleteServerRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSMessageHandler.deleteServerRequest.serverName)
}
inline void deleteServerRequest::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSMessageHandler.deleteServerRequest.serverName)
}
inline ::std::string* deleteServerRequest::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.deleteServerRequest.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteServerRequest::release_servername() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.deleteServerRequest.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteServerRequest::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:DSMessageHandler.deleteServerRequest.serverName)
}

// -------------------------------------------------------------------

// DSResponse

// uint32 magic = 1;
inline void DSResponse::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::magic() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.magic)
  return magic_;
}
inline void DSResponse::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSResponse.magic)
}

// uint32 version = 2;
inline void DSResponse::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::version() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.version)
  return version_;
}
inline void DSResponse::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSResponse.version)
}

// uint32 serial = 3;
inline void DSResponse::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::serial() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.serial)
  return serial_;
}
inline void DSResponse::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.DSResponse.serial)
}

// .DSMessageHandler.registerServerResponse registerServerRes = 4;
inline bool DSResponse::has_registerserverres() const {
  return function_case() == kRegisterServerRes;
}
inline void DSResponse::set_has_registerserverres() {
  _oneof_case_[0] = kRegisterServerRes;
}
inline void DSResponse::clear_registerserverres() {
  if (has_registerserverres()) {
    delete function_.registerserverres_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::registerServerResponse& DSResponse::_internal_registerserverres() const {
  return *function_.registerserverres_;
}
inline ::DSMessageHandler::registerServerResponse* DSResponse::release_registerserverres() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSResponse.registerServerRes)
  if (has_registerserverres()) {
    clear_has_function();
      ::DSMessageHandler::registerServerResponse* temp = function_.registerserverres_;
    function_.registerserverres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::registerServerResponse& DSResponse::registerserverres() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.registerServerRes)
  return has_registerserverres()
      ? *function_.registerserverres_
      : *reinterpret_cast< ::DSMessageHandler::registerServerResponse*>(&::DSMessageHandler::_registerServerResponse_default_instance_);
}
inline ::DSMessageHandler::registerServerResponse* DSResponse::mutable_registerserverres() {
  if (!has_registerserverres()) {
    clear_function();
    set_has_registerserverres();
    function_.registerserverres_ = CreateMaybeMessage< ::DSMessageHandler::registerServerResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSResponse.registerServerRes)
  return function_.registerserverres_;
}

// .DSMessageHandler.searchServerResponse searchServerRes = 5;
inline bool DSResponse::has_searchserverres() const {
  return function_case() == kSearchServerRes;
}
inline void DSResponse::set_has_searchserverres() {
  _oneof_case_[0] = kSearchServerRes;
}
inline void DSResponse::clear_searchserverres() {
  if (has_searchserverres()) {
    delete function_.searchserverres_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::searchServerResponse& DSResponse::_internal_searchserverres() const {
  return *function_.searchserverres_;
}
inline ::DSMessageHandler::searchServerResponse* DSResponse::release_searchserverres() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSResponse.searchServerRes)
  if (has_searchserverres()) {
    clear_has_function();
      ::DSMessageHandler::searchServerResponse* temp = function_.searchserverres_;
    function_.searchserverres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::searchServerResponse& DSResponse::searchserverres() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.searchServerRes)
  return has_searchserverres()
      ? *function_.searchserverres_
      : *reinterpret_cast< ::DSMessageHandler::searchServerResponse*>(&::DSMessageHandler::_searchServerResponse_default_instance_);
}
inline ::DSMessageHandler::searchServerResponse* DSResponse::mutable_searchserverres() {
  if (!has_searchserverres()) {
    clear_function();
    set_has_searchserverres();
    function_.searchserverres_ = CreateMaybeMessage< ::DSMessageHandler::searchServerResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSResponse.searchServerRes)
  return function_.searchserverres_;
}

// .DSMessageHandler.deleteServerResponse deleteServerRes = 6;
inline bool DSResponse::has_deleteserverres() const {
  return function_case() == kDeleteServerRes;
}
inline void DSResponse::set_has_deleteserverres() {
  _oneof_case_[0] = kDeleteServerRes;
}
inline void DSResponse::clear_deleteserverres() {
  if (has_deleteserverres()) {
    delete function_.deleteserverres_;
    clear_has_function();
  }
}
inline const ::DSMessageHandler::deleteServerResponse& DSResponse::_internal_deleteserverres() const {
  return *function_.deleteserverres_;
}
inline ::DSMessageHandler::deleteServerResponse* DSResponse::release_deleteserverres() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.DSResponse.deleteServerRes)
  if (has_deleteserverres()) {
    clear_has_function();
      ::DSMessageHandler::deleteServerResponse* temp = function_.deleteserverres_;
    function_.deleteserverres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::DSMessageHandler::deleteServerResponse& DSResponse::deleteserverres() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.DSResponse.deleteServerRes)
  return has_deleteserverres()
      ? *function_.deleteserverres_
      : *reinterpret_cast< ::DSMessageHandler::deleteServerResponse*>(&::DSMessageHandler::_deleteServerResponse_default_instance_);
}
inline ::DSMessageHandler::deleteServerResponse* DSResponse::mutable_deleteserverres() {
  if (!has_deleteserverres()) {
    clear_function();
    set_has_deleteserverres();
    function_.deleteserverres_ = CreateMaybeMessage< ::DSMessageHandler::deleteServerResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.DSResponse.deleteServerRes)
  return function_.deleteserverres_;
}

inline bool DSResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void DSResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline DSResponse::FunctionCase DSResponse::function_case() const {
  return DSResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerServerResponse

// bool success = 1;
inline void registerServerResponse::clear_success() {
  success_ = false;
}
inline bool registerServerResponse::success() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.registerServerResponse.success)
  return success_;
}
inline void registerServerResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.registerServerResponse.success)
}

// -------------------------------------------------------------------

// searchServerResponse

// bool found = 1;
inline void searchServerResponse::clear_found() {
  found_ = false;
}
inline bool searchServerResponse::found() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.searchServerResponse.found)
  return found_;
}
inline void searchServerResponse::set_found(bool value) {
  
  found_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.searchServerResponse.found)
}

// string serverName = 2;
inline void searchServerResponse::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& searchServerResponse::servername() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.searchServerResponse.serverName)
  return servername_.GetNoArena();
}
inline void searchServerResponse::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSMessageHandler.searchServerResponse.serverName)
}
#if LANG_CXX11
inline void searchServerResponse::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSMessageHandler.searchServerResponse.serverName)
}
#endif
inline void searchServerResponse::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSMessageHandler.searchServerResponse.serverName)
}
inline void searchServerResponse::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSMessageHandler.searchServerResponse.serverName)
}
inline ::std::string* searchServerResponse::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:DSMessageHandler.searchServerResponse.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* searchServerResponse::release_servername() {
  // @@protoc_insertion_point(field_release:DSMessageHandler.searchServerResponse.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchServerResponse::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:DSMessageHandler.searchServerResponse.serverName)
}

// int32 port = 3;
inline void searchServerResponse::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 searchServerResponse::port() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.searchServerResponse.port)
  return port_;
}
inline void searchServerResponse::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.searchServerResponse.port)
}

// -------------------------------------------------------------------

// deleteServerResponse

// bool success = 1;
inline void deleteServerResponse::clear_success() {
  success_ = false;
}
inline bool deleteServerResponse::success() const {
  // @@protoc_insertion_point(field_get:DSMessageHandler.deleteServerResponse.success)
  return success_;
}
inline void deleteServerResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:DSMessageHandler.deleteServerResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DSMessageHandler

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DS_2eproto
