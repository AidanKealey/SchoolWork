/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /Users/aidankealey/Documents/fifth_year/ELEC_477/team25/a4/zoneTransfer.idl
  Source: /Users/aidankealey/Documents/fifth_year/ELEC_477/team25/a4/build/zoneTransfer.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX__USERS_AIDANKEALEY_DOCUMENTS_FIFTH_YEAR_ELEC_477_TEAM25_A4_BUILD_ZONETRANSFER_HPP_DBF56F50916896376F66F6860ABB1BF3
#define DDSCXX__USERS_AIDANKEALEY_DOCUMENTS_FIFTH_YEAR_ELEC_477_TEAM25_A4_BUILD_ZONETRANSFER_HPP_DBF56F50916896376F66F6860ABB1BF3

#include <utility>
#include <ostream>
#include <cstdint>
#include <string>

namespace Radar
{
enum class zone
{
  AD,
  centre};

std::ostream& operator<<(std::ostream& os, zone const& rhs);

class Route
{
private:
 std::string callsign_;
 ::Radar::zone birthplace_ = ::Radar::zone::AD;
 ::Radar::zone destination_ = ::Radar::zone::AD;
 uint32_t timestamp_ = 0;

public:
  Route() = default;

  explicit Route(
    const std::string& callsign,
    ::Radar::zone birthplace,
    ::Radar::zone destination,
    uint32_t timestamp) :
    callsign_(callsign),
    birthplace_(birthplace),
    destination_(destination),
    timestamp_(timestamp) { }

  const std::string& callsign() const { return this->callsign_; }
  std::string& callsign() { return this->callsign_; }
  void callsign(const std::string& _val_) { this->callsign_ = _val_; }
  void callsign(std::string&& _val_) { this->callsign_ = std::move(_val_); }
  ::Radar::zone birthplace() const { return this->birthplace_; }
  ::Radar::zone& birthplace() { return this->birthplace_; }
  void birthplace(::Radar::zone _val_) { this->birthplace_ = _val_; }
  ::Radar::zone destination() const { return this->destination_; }
  ::Radar::zone& destination() { return this->destination_; }
  void destination(::Radar::zone _val_) { this->destination_ = _val_; }
  uint32_t timestamp() const { return this->timestamp_; }
  uint32_t& timestamp() { return this->timestamp_; }
  void timestamp(uint32_t _val_) { this->timestamp_ = _val_; }

  bool operator==(const Route& _other) const
  {
    (void) _other;
    return callsign_ == _other.callsign_ &&
      birthplace_ == _other.birthplace_ &&
      destination_ == _other.destination_ &&
      timestamp_ == _other.timestamp_;
  }

  bool operator!=(const Route& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, Route const& rhs);

} //namespace Radar

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::Radar::Route>::getTypeName()
{
  return "Radar::Route";
}

template <> constexpr bool TopicTraits<::Radar::Route>::isSelfContained()
{
  return false;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::Radar::Route>::type_map_blob_sz() { return 628; }
template<> constexpr unsigned int TopicTraits<::Radar::Route>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::Radar::Route>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xda,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x73,  0xe6,  0x92,  0x2f,  0x25,  0x41,  0xf1, 
 0xac,  0xec,  0x48,  0x1b,  0x22,  0x5d,  0xa6,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x70,  0x00,  0x81,  0x3a,  0xbe,  0x31, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x9b,  0x2f,  0xa0,  0x28,  0xe9, 
 0x7e,  0x7d,  0x70,  0xa7,  0xe8,  0x1e,  0x64,  0x75,  0x51,  0xbd,  0x34,  0xd7,  0x3a,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x9b,  0x2f,  0xa0,  0x28,  0xe9, 
 0x7e,  0x7d,  0x70,  0xa7,  0xe8,  0x1e,  0x64,  0x75,  0x51,  0x69,  0x90,  0xa5,  0x43,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xd7,  0xe6,  0xd5,  0x5b,  0xf1, 
 0x9b,  0x2f,  0xa0,  0x28,  0xe9,  0x7e,  0x7d,  0x70,  0xa7,  0xe8,  0x1e,  0x64,  0x75,  0x51,  0x00,  0x00, 
 0x3a,  0x00,  0x00,  0x00,  0xf1,  0x40,  0x01,  0x00,  0x02,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0xe1,  0x82,  0xeb,  0xbc,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0xd6,  0x4a,  0x4d,  0x02,  0x00,  0x00, 
 0x49,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x7f,  0x73,  0x24,  0x72,  0x6b,  0x4f,  0xc6, 
 0xe6,  0x62,  0x1a,  0x39,  0x31,  0x19,  0x12,  0x00,  0xc0,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x52,  0x61,  0x64,  0x61, 
 0x72,  0x3a,  0x3a,  0x52,  0x6f,  0x75,  0x74,  0x65,  0x00,  0x00,  0x00,  0x00,  0x9c,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x31,  0x00,  0x70,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x63,  0x61,  0x6c,  0x6c,  0x73,  0x69,  0x67,  0x6e,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x5a,  0xa8,  0x43,  0xc1,  0x6b, 
 0xf4,  0xcc,  0x83,  0x3a,  0x14,  0x90,  0x30,  0xb5,  0xac,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x62,  0x69,  0x72,  0x74,  0x68,  0x70,  0x6c,  0x61,  0x63,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x5a,  0xa8,  0x43,  0xc1,  0x6b, 
 0xf4,  0xcc,  0x83,  0x3a,  0x14,  0x90,  0x30,  0xb5,  0xac,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x64,  0x65,  0x73,  0x74,  0x69,  0x6e,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0xf2,  0x5a,  0xa8,  0x43, 
 0xc1,  0x6b,  0xf4,  0xcc,  0x83,  0x3a,  0x14,  0x90,  0x30,  0xb5,  0xac,  0x00,  0x5d,  0x00,  0x00,  0x00, 
 0xf2,  0x40,  0x01,  0x00,  0x14,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x52,  0x61,  0x64,  0x61,  0x72,  0x3a,  0x3a,  0x7a,  0x6f,  0x6e,  0x65,  0x00,  0x3d,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x41,  0x44,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x63,  0x65,  0x6e,  0x74,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0x7f,  0x73,  0x24,  0x72,  0x6b,  0x4f,  0xc6, 
 0xe6,  0x62,  0x1a,  0x39,  0x31,  0x19,  0x12,  0xf1,  0x73,  0xe6,  0x92,  0x2f,  0x25,  0x41,  0xf1,  0xac, 
 0xec,  0x48,  0x1b,  0x22,  0x5d,  0xa6,  0xf2,  0x5a,  0xa8,  0x43,  0xc1,  0x6b,  0xf4,  0xcc,  0x83,  0x3a, 
 0x14,  0x90,  0x30,  0xb5,  0xac,  0xf1,  0x9b,  0x2f,  0xa0,  0x28,  0xe9,  0x7e,  0x7d,  0x70,  0xa7,  0xe8, 
 0x1e,  0x64,  0x75,  0x51, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::Radar::Route>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x73,  0xe6,  0x92,  0x2f,  0x25,  0x41,  0xf1,  0xac,  0xec,  0x48,  0x1b, 
 0x22,  0x5d,  0xa6,  0x00,  0x77,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x9b,  0x2f,  0xa0,  0x28,  0xe9,  0x7e,  0x7d, 
 0x70,  0xa7,  0xe8,  0x1e,  0x64,  0x75,  0x51,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x7f,  0x73,  0x24, 
 0x72,  0x6b,  0x4f,  0xc6,  0xe6,  0x62,  0x1a,  0x39,  0x31,  0x19,  0x12,  0x00,  0xc4,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x5a,  0xa8,  0x43,  0xc1,  0x6b,  0xf4,  0xcc,  0x83,  0x3a,  0x14,  0x90,  0x30,  0xb5,  0xac,  0x00, 
 0x61,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::Radar::Route>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::Radar::Route>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::Radar::Route)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
::Radar::zone enum_conversion<::Radar::zone>(uint32_t in);

template<>
const propvec &get_type_props<::Radar::Route>();

namespace {
  static const volatile propvec &properties___Radar__Route = get_type_props<::Radar::Route>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::Radar::Route& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.birthplace()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.destination()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::Radar::Route& instance, key_mode key) {
  const auto &props = get_type_props<::Radar::Route>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::Radar::Route& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.birthplace()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.destination()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::Radar::Route& instance, key_mode key) {
  const auto &props = get_type_props<::Radar::Route>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::Radar::Route& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.birthplace()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.destination()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::Radar::Route& instance, key_mode key) {
  const auto &props = get_type_props<::Radar::Route>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::Radar::Route& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.birthplace()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.destination()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::Radar::Route& instance, key_mode key) {
  const auto &props = get_type_props<::Radar::Route>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__USERS_AIDANKEALEY_DOCUMENTS_FIFTH_YEAR_ELEC_477_TEAM25_A4_BUILD_ZONETRANSFER_HPP_DBF56F50916896376F66F6860ABB1BF3
