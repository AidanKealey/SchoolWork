/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /Users/aidankealey/Documents/fifth_year/ELEC_477/team25/a4/zoneTransfer.idl
  Source: /Users/aidankealey/Documents/fifth_year/ELEC_477/team25/a4/build/zoneTransfer.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "/Users/aidankealey/Documents/fifth_year/ELEC_477/team25/a4/build/zoneTransfer.hpp"

namespace Radar
{
std::ostream& operator<<(std::ostream& os, zone const& rhs)
{
  (void) rhs;
  switch (rhs)
  {
    case zone::AD:
      os << "zone::AD"; break;
    case zone::centre:
      os << "zone::centre"; break;
    default: break;
  }
  return os;
}

std::ostream& operator<<(std::ostream& os, Route const& rhs)
{
  (void) rhs;
  os << "[";
  os << "callsign: " << rhs.callsign();
  os << ", birthplace: " << rhs.birthplace();
  os << ", destination: " << rhs.destination();
  os << ", timestamp: " << rhs.timestamp();
  os << "]";
  return os;
}

} //namespace Radar

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
::Radar::zone enum_conversion<::Radar::zone>(uint32_t in) {
  switch (in) {
    default:
    case 0:
    return ::Radar::zone::AD;
    break;
    case 1:
    return ::Radar::zone::centre;
    break;
  }
}

template<>
const propvec &get_type_props<::Radar::Route>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::callsign
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<::Radar::zone>(), extensibility::ext_final, false));  //::birthplace
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<::Radar::zone>(), extensibility::ext_final, false));  //::destination
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<uint32_t>(), extensibility::ext_final, false));  //::timestamp
  keylist.add_key_endpoint(std::list<uint32_t>{0});

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

