// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E477DirectoryService.proto

#ifndef PROTOBUF_INCLUDED_E477DirectoryService_2eproto
#define PROTOBUF_INCLUDED_E477DirectoryService_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_E477DirectoryService_2eproto 

namespace protobuf_E477DirectoryService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_E477DirectoryService_2eproto
namespace E477DirectoryService {
class DSRequest;
class DSRequestDefaultTypeInternal;
extern DSRequestDefaultTypeInternal _DSRequest_default_instance_;
class DSResponse;
class DSResponseDefaultTypeInternal;
extern DSResponseDefaultTypeInternal _DSResponse_default_instance_;
class deleteServiceRequest;
class deleteServiceRequestDefaultTypeInternal;
extern deleteServiceRequestDefaultTypeInternal _deleteServiceRequest_default_instance_;
class deleteServiceResponse;
class deleteServiceResponseDefaultTypeInternal;
extern deleteServiceResponseDefaultTypeInternal _deleteServiceResponse_default_instance_;
class registerServiceRequest;
class registerServiceRequestDefaultTypeInternal;
extern registerServiceRequestDefaultTypeInternal _registerServiceRequest_default_instance_;
class registerServiceResponse;
class registerServiceResponseDefaultTypeInternal;
extern registerServiceResponseDefaultTypeInternal _registerServiceResponse_default_instance_;
class searchServiceRequest;
class searchServiceRequestDefaultTypeInternal;
extern searchServiceRequestDefaultTypeInternal _searchServiceRequest_default_instance_;
class searchServiceResponse;
class searchServiceResponseDefaultTypeInternal;
extern searchServiceResponseDefaultTypeInternal _searchServiceResponse_default_instance_;
}  // namespace E477DirectoryService
namespace google {
namespace protobuf {
template<> ::E477DirectoryService::DSRequest* Arena::CreateMaybeMessage<::E477DirectoryService::DSRequest>(Arena*);
template<> ::E477DirectoryService::DSResponse* Arena::CreateMaybeMessage<::E477DirectoryService::DSResponse>(Arena*);
template<> ::E477DirectoryService::deleteServiceRequest* Arena::CreateMaybeMessage<::E477DirectoryService::deleteServiceRequest>(Arena*);
template<> ::E477DirectoryService::deleteServiceResponse* Arena::CreateMaybeMessage<::E477DirectoryService::deleteServiceResponse>(Arena*);
template<> ::E477DirectoryService::registerServiceRequest* Arena::CreateMaybeMessage<::E477DirectoryService::registerServiceRequest>(Arena*);
template<> ::E477DirectoryService::registerServiceResponse* Arena::CreateMaybeMessage<::E477DirectoryService::registerServiceResponse>(Arena*);
template<> ::E477DirectoryService::searchServiceRequest* Arena::CreateMaybeMessage<::E477DirectoryService::searchServiceRequest>(Arena*);
template<> ::E477DirectoryService::searchServiceResponse* Arena::CreateMaybeMessage<::E477DirectoryService::searchServiceResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace E477DirectoryService {

// ===================================================================

class DSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.DSRequest) */ {
 public:
  DSRequest();
  virtual ~DSRequest();

  DSRequest(const DSRequest& from);

  inline DSRequest& operator=(const DSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSRequest(DSRequest&& from) noexcept
    : DSRequest() {
    *this = ::std::move(from);
  }

  inline DSRequest& operator=(DSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DSRequest& default_instance();

  enum FunctionCase {
    kRegisterServiceArgs = 4,
    kSearchServiceArgs = 5,
    kDeleteServiceArgs = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSRequest* internal_default_instance() {
    return reinterpret_cast<const DSRequest*>(
               &_DSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DSRequest* other);
  friend void swap(DSRequest& a, DSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSRequest* New() const final {
    return CreateMaybeMessage<DSRequest>(NULL);
  }

  DSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSRequest& from);
  void MergeFrom(const DSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .E477DirectoryService.registerServiceRequest registerServiceArgs = 4;
  bool has_registerserviceargs() const;
  void clear_registerserviceargs();
  static const int kRegisterServiceArgsFieldNumber = 4;
  private:
  const ::E477DirectoryService::registerServiceRequest& _internal_registerserviceargs() const;
  public:
  const ::E477DirectoryService::registerServiceRequest& registerserviceargs() const;
  ::E477DirectoryService::registerServiceRequest* release_registerserviceargs();
  ::E477DirectoryService::registerServiceRequest* mutable_registerserviceargs();
  void set_allocated_registerserviceargs(::E477DirectoryService::registerServiceRequest* registerserviceargs);

  // .E477DirectoryService.searchServiceRequest searchServiceArgs = 5;
  bool has_searchserviceargs() const;
  void clear_searchserviceargs();
  static const int kSearchServiceArgsFieldNumber = 5;
  private:
  const ::E477DirectoryService::searchServiceRequest& _internal_searchserviceargs() const;
  public:
  const ::E477DirectoryService::searchServiceRequest& searchserviceargs() const;
  ::E477DirectoryService::searchServiceRequest* release_searchserviceargs();
  ::E477DirectoryService::searchServiceRequest* mutable_searchserviceargs();
  void set_allocated_searchserviceargs(::E477DirectoryService::searchServiceRequest* searchserviceargs);

  // .E477DirectoryService.deleteServiceRequest deleteServiceArgs = 6;
  bool has_deleteserviceargs() const;
  void clear_deleteserviceargs();
  static const int kDeleteServiceArgsFieldNumber = 6;
  private:
  const ::E477DirectoryService::deleteServiceRequest& _internal_deleteserviceargs() const;
  public:
  const ::E477DirectoryService::deleteServiceRequest& deleteserviceargs() const;
  ::E477DirectoryService::deleteServiceRequest* release_deleteserviceargs();
  ::E477DirectoryService::deleteServiceRequest* mutable_deleteserviceargs();
  void set_allocated_deleteserviceargs(::E477DirectoryService::deleteServiceRequest* deleteserviceargs);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477DirectoryService.DSRequest)
 private:
  void set_has_registerserviceargs();
  void set_has_searchserviceargs();
  void set_has_deleteserviceargs();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477DirectoryService::registerServiceRequest* registerserviceargs_;
    ::E477DirectoryService::searchServiceRequest* searchserviceargs_;
    ::E477DirectoryService::deleteServiceRequest* deleteserviceargs_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.registerServiceRequest) */ {
 public:
  registerServiceRequest();
  virtual ~registerServiceRequest();

  registerServiceRequest(const registerServiceRequest& from);

  inline registerServiceRequest& operator=(const registerServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerServiceRequest(registerServiceRequest&& from) noexcept
    : registerServiceRequest() {
    *this = ::std::move(from);
  }

  inline registerServiceRequest& operator=(registerServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerServiceRequest* internal_default_instance() {
    return reinterpret_cast<const registerServiceRequest*>(
               &_registerServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(registerServiceRequest* other);
  friend void swap(registerServiceRequest& a, registerServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerServiceRequest* New() const final {
    return CreateMaybeMessage<registerServiceRequest>(NULL);
  }

  registerServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerServiceRequest& from);
  void MergeFrom(const registerServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // string serverName = 2;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.registerServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class searchServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.searchServiceRequest) */ {
 public:
  searchServiceRequest();
  virtual ~searchServiceRequest();

  searchServiceRequest(const searchServiceRequest& from);

  inline searchServiceRequest& operator=(const searchServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  searchServiceRequest(searchServiceRequest&& from) noexcept
    : searchServiceRequest() {
    *this = ::std::move(from);
  }

  inline searchServiceRequest& operator=(searchServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const searchServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchServiceRequest* internal_default_instance() {
    return reinterpret_cast<const searchServiceRequest*>(
               &_searchServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(searchServiceRequest* other);
  friend void swap(searchServiceRequest& a, searchServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline searchServiceRequest* New() const final {
    return CreateMaybeMessage<searchServiceRequest>(NULL);
  }

  searchServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<searchServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const searchServiceRequest& from);
  void MergeFrom(const searchServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.searchServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.deleteServiceRequest) */ {
 public:
  deleteServiceRequest();
  virtual ~deleteServiceRequest();

  deleteServiceRequest(const deleteServiceRequest& from);

  inline deleteServiceRequest& operator=(const deleteServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteServiceRequest(deleteServiceRequest&& from) noexcept
    : deleteServiceRequest() {
    *this = ::std::move(from);
  }

  inline deleteServiceRequest& operator=(deleteServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteServiceRequest* internal_default_instance() {
    return reinterpret_cast<const deleteServiceRequest*>(
               &_deleteServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(deleteServiceRequest* other);
  friend void swap(deleteServiceRequest& a, deleteServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteServiceRequest* New() const final {
    return CreateMaybeMessage<deleteServiceRequest>(NULL);
  }

  deleteServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteServiceRequest& from);
  void MergeFrom(const deleteServiceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.deleteServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DSResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.DSResponse) */ {
 public:
  DSResponse();
  virtual ~DSResponse();

  DSResponse(const DSResponse& from);

  inline DSResponse& operator=(const DSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DSResponse(DSResponse&& from) noexcept
    : DSResponse() {
    *this = ::std::move(from);
  }

  inline DSResponse& operator=(DSResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DSResponse& default_instance();

  enum FunctionCase {
    kRegisterServiceRes = 4,
    kSearchServiceRes = 5,
    kDeleteServiceRes = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSResponse* internal_default_instance() {
    return reinterpret_cast<const DSResponse*>(
               &_DSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DSResponse* other);
  friend void swap(DSResponse& a, DSResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DSResponse* New() const final {
    return CreateMaybeMessage<DSResponse>(NULL);
  }

  DSResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DSResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DSResponse& from);
  void MergeFrom(const DSResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::uint32 magic() const;
  void set_magic(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // .E477DirectoryService.registerServiceResponse registerServiceRes = 4;
  bool has_registerserviceres() const;
  void clear_registerserviceres();
  static const int kRegisterServiceResFieldNumber = 4;
  private:
  const ::E477DirectoryService::registerServiceResponse& _internal_registerserviceres() const;
  public:
  const ::E477DirectoryService::registerServiceResponse& registerserviceres() const;
  ::E477DirectoryService::registerServiceResponse* release_registerserviceres();
  ::E477DirectoryService::registerServiceResponse* mutable_registerserviceres();
  void set_allocated_registerserviceres(::E477DirectoryService::registerServiceResponse* registerserviceres);

  // .E477DirectoryService.searchServiceResponse searchServiceRes = 5;
  bool has_searchserviceres() const;
  void clear_searchserviceres();
  static const int kSearchServiceResFieldNumber = 5;
  private:
  const ::E477DirectoryService::searchServiceResponse& _internal_searchserviceres() const;
  public:
  const ::E477DirectoryService::searchServiceResponse& searchserviceres() const;
  ::E477DirectoryService::searchServiceResponse* release_searchserviceres();
  ::E477DirectoryService::searchServiceResponse* mutable_searchserviceres();
  void set_allocated_searchserviceres(::E477DirectoryService::searchServiceResponse* searchserviceres);

  // .E477DirectoryService.deleteServiceResponse deleteServiceRes = 6;
  bool has_deleteserviceres() const;
  void clear_deleteserviceres();
  static const int kDeleteServiceResFieldNumber = 6;
  private:
  const ::E477DirectoryService::deleteServiceResponse& _internal_deleteserviceres() const;
  public:
  const ::E477DirectoryService::deleteServiceResponse& deleteserviceres() const;
  ::E477DirectoryService::deleteServiceResponse* release_deleteserviceres();
  ::E477DirectoryService::deleteServiceResponse* mutable_deleteserviceres();
  void set_allocated_deleteserviceres(::E477DirectoryService::deleteServiceResponse* deleteserviceres);

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477DirectoryService.DSResponse)
 private:
  void set_has_registerserviceres();
  void set_has_searchserviceres();
  void set_has_deleteserviceres();

  inline bool has_function() const;
  inline void clear_has_function();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477DirectoryService::registerServiceResponse* registerserviceres_;
    ::E477DirectoryService::searchServiceResponse* searchserviceres_;
    ::E477DirectoryService::deleteServiceResponse* deleteserviceres_;
  } function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.registerServiceResponse) */ {
 public:
  registerServiceResponse();
  virtual ~registerServiceResponse();

  registerServiceResponse(const registerServiceResponse& from);

  inline registerServiceResponse& operator=(const registerServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerServiceResponse(registerServiceResponse&& from) noexcept
    : registerServiceResponse() {
    *this = ::std::move(from);
  }

  inline registerServiceResponse& operator=(registerServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerServiceResponse* internal_default_instance() {
    return reinterpret_cast<const registerServiceResponse*>(
               &_registerServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(registerServiceResponse* other);
  friend void swap(registerServiceResponse& a, registerServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerServiceResponse* New() const final {
    return CreateMaybeMessage<registerServiceResponse>(NULL);
  }

  registerServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerServiceResponse& from);
  void MergeFrom(const registerServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.registerServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class searchServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.searchServiceResponse) */ {
 public:
  searchServiceResponse();
  virtual ~searchServiceResponse();

  searchServiceResponse(const searchServiceResponse& from);

  inline searchServiceResponse& operator=(const searchServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  searchServiceResponse(searchServiceResponse&& from) noexcept
    : searchServiceResponse() {
    *this = ::std::move(from);
  }

  inline searchServiceResponse& operator=(searchServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const searchServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchServiceResponse* internal_default_instance() {
    return reinterpret_cast<const searchServiceResponse*>(
               &_searchServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(searchServiceResponse* other);
  friend void swap(searchServiceResponse& a, searchServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline searchServiceResponse* New() const final {
    return CreateMaybeMessage<searchServiceResponse>(NULL);
  }

  searchServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<searchServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const searchServiceResponse& from);
  void MergeFrom(const searchServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverName = 2;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // bool found = 1;
  void clear_found();
  static const int kFoundFieldNumber = 1;
  bool found() const;
  void set_found(bool value);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.searchServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  bool found_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class deleteServiceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477DirectoryService.deleteServiceResponse) */ {
 public:
  deleteServiceResponse();
  virtual ~deleteServiceResponse();

  deleteServiceResponse(const deleteServiceResponse& from);

  inline deleteServiceResponse& operator=(const deleteServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deleteServiceResponse(deleteServiceResponse&& from) noexcept
    : deleteServiceResponse() {
    *this = ::std::move(from);
  }

  inline deleteServiceResponse& operator=(deleteServiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteServiceResponse* internal_default_instance() {
    return reinterpret_cast<const deleteServiceResponse*>(
               &_deleteServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(deleteServiceResponse* other);
  friend void swap(deleteServiceResponse& a, deleteServiceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deleteServiceResponse* New() const final {
    return CreateMaybeMessage<deleteServiceResponse>(NULL);
  }

  deleteServiceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<deleteServiceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const deleteServiceResponse& from);
  void MergeFrom(const deleteServiceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteServiceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:E477DirectoryService.deleteServiceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_E477DirectoryService_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DSRequest

// uint32 magic = 1;
inline void DSRequest::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::magic() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.magic)
  return magic_;
}
inline void DSRequest::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSRequest.magic)
}

// uint32 version = 2;
inline void DSRequest::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::version() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.version)
  return version_;
}
inline void DSRequest::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSRequest.version)
}

// uint32 serial = 3;
inline void DSRequest::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 DSRequest::serial() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.serial)
  return serial_;
}
inline void DSRequest::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSRequest.serial)
}

// .E477DirectoryService.registerServiceRequest registerServiceArgs = 4;
inline bool DSRequest::has_registerserviceargs() const {
  return function_case() == kRegisterServiceArgs;
}
inline void DSRequest::set_has_registerserviceargs() {
  _oneof_case_[0] = kRegisterServiceArgs;
}
inline void DSRequest::clear_registerserviceargs() {
  if (has_registerserviceargs()) {
    delete function_.registerserviceargs_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::registerServiceRequest& DSRequest::_internal_registerserviceargs() const {
  return *function_.registerserviceargs_;
}
inline ::E477DirectoryService::registerServiceRequest* DSRequest::release_registerserviceargs() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSRequest.registerServiceArgs)
  if (has_registerserviceargs()) {
    clear_has_function();
      ::E477DirectoryService::registerServiceRequest* temp = function_.registerserviceargs_;
    function_.registerserviceargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::registerServiceRequest& DSRequest::registerserviceargs() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.registerServiceArgs)
  return has_registerserviceargs()
      ? *function_.registerserviceargs_
      : *reinterpret_cast< ::E477DirectoryService::registerServiceRequest*>(&::E477DirectoryService::_registerServiceRequest_default_instance_);
}
inline ::E477DirectoryService::registerServiceRequest* DSRequest::mutable_registerserviceargs() {
  if (!has_registerserviceargs()) {
    clear_function();
    set_has_registerserviceargs();
    function_.registerserviceargs_ = CreateMaybeMessage< ::E477DirectoryService::registerServiceRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSRequest.registerServiceArgs)
  return function_.registerserviceargs_;
}

// .E477DirectoryService.searchServiceRequest searchServiceArgs = 5;
inline bool DSRequest::has_searchserviceargs() const {
  return function_case() == kSearchServiceArgs;
}
inline void DSRequest::set_has_searchserviceargs() {
  _oneof_case_[0] = kSearchServiceArgs;
}
inline void DSRequest::clear_searchserviceargs() {
  if (has_searchserviceargs()) {
    delete function_.searchserviceargs_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::searchServiceRequest& DSRequest::_internal_searchserviceargs() const {
  return *function_.searchserviceargs_;
}
inline ::E477DirectoryService::searchServiceRequest* DSRequest::release_searchserviceargs() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSRequest.searchServiceArgs)
  if (has_searchserviceargs()) {
    clear_has_function();
      ::E477DirectoryService::searchServiceRequest* temp = function_.searchserviceargs_;
    function_.searchserviceargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::searchServiceRequest& DSRequest::searchserviceargs() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.searchServiceArgs)
  return has_searchserviceargs()
      ? *function_.searchserviceargs_
      : *reinterpret_cast< ::E477DirectoryService::searchServiceRequest*>(&::E477DirectoryService::_searchServiceRequest_default_instance_);
}
inline ::E477DirectoryService::searchServiceRequest* DSRequest::mutable_searchserviceargs() {
  if (!has_searchserviceargs()) {
    clear_function();
    set_has_searchserviceargs();
    function_.searchserviceargs_ = CreateMaybeMessage< ::E477DirectoryService::searchServiceRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSRequest.searchServiceArgs)
  return function_.searchserviceargs_;
}

// .E477DirectoryService.deleteServiceRequest deleteServiceArgs = 6;
inline bool DSRequest::has_deleteserviceargs() const {
  return function_case() == kDeleteServiceArgs;
}
inline void DSRequest::set_has_deleteserviceargs() {
  _oneof_case_[0] = kDeleteServiceArgs;
}
inline void DSRequest::clear_deleteserviceargs() {
  if (has_deleteserviceargs()) {
    delete function_.deleteserviceargs_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::deleteServiceRequest& DSRequest::_internal_deleteserviceargs() const {
  return *function_.deleteserviceargs_;
}
inline ::E477DirectoryService::deleteServiceRequest* DSRequest::release_deleteserviceargs() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSRequest.deleteServiceArgs)
  if (has_deleteserviceargs()) {
    clear_has_function();
      ::E477DirectoryService::deleteServiceRequest* temp = function_.deleteserviceargs_;
    function_.deleteserviceargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::deleteServiceRequest& DSRequest::deleteserviceargs() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSRequest.deleteServiceArgs)
  return has_deleteserviceargs()
      ? *function_.deleteserviceargs_
      : *reinterpret_cast< ::E477DirectoryService::deleteServiceRequest*>(&::E477DirectoryService::_deleteServiceRequest_default_instance_);
}
inline ::E477DirectoryService::deleteServiceRequest* DSRequest::mutable_deleteserviceargs() {
  if (!has_deleteserviceargs()) {
    clear_function();
    set_has_deleteserviceargs();
    function_.deleteserviceargs_ = CreateMaybeMessage< ::E477DirectoryService::deleteServiceRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSRequest.deleteServiceArgs)
  return function_.deleteserviceargs_;
}

inline bool DSRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void DSRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline DSRequest::FunctionCase DSRequest::function_case() const {
  return DSRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerServiceRequest

// string serviceName = 1;
inline void registerServiceRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerServiceRequest::servicename() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.registerServiceRequest.serviceName)
  return servicename_.GetNoArena();
}
inline void registerServiceRequest::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477DirectoryService.registerServiceRequest.serviceName)
}
#if LANG_CXX11
inline void registerServiceRequest::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477DirectoryService.registerServiceRequest.serviceName)
}
#endif
inline void registerServiceRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477DirectoryService.registerServiceRequest.serviceName)
}
inline void registerServiceRequest::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477DirectoryService.registerServiceRequest.serviceName)
}
inline ::std::string* registerServiceRequest::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.registerServiceRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerServiceRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.registerServiceRequest.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerServiceRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:E477DirectoryService.registerServiceRequest.serviceName)
}

// string serverName = 2;
inline void registerServiceRequest::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerServiceRequest::servername() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.registerServiceRequest.serverName)
  return servername_.GetNoArena();
}
inline void registerServiceRequest::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477DirectoryService.registerServiceRequest.serverName)
}
#if LANG_CXX11
inline void registerServiceRequest::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477DirectoryService.registerServiceRequest.serverName)
}
#endif
inline void registerServiceRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477DirectoryService.registerServiceRequest.serverName)
}
inline void registerServiceRequest::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477DirectoryService.registerServiceRequest.serverName)
}
inline ::std::string* registerServiceRequest::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.registerServiceRequest.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerServiceRequest::release_servername() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.registerServiceRequest.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerServiceRequest::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:E477DirectoryService.registerServiceRequest.serverName)
}

// int32 port = 3;
inline void registerServiceRequest::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 registerServiceRequest::port() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.registerServiceRequest.port)
  return port_;
}
inline void registerServiceRequest::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.registerServiceRequest.port)
}

// -------------------------------------------------------------------

// searchServiceRequest

// string serviceName = 1;
inline void searchServiceRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& searchServiceRequest::servicename() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.searchServiceRequest.serviceName)
  return servicename_.GetNoArena();
}
inline void searchServiceRequest::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477DirectoryService.searchServiceRequest.serviceName)
}
#if LANG_CXX11
inline void searchServiceRequest::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477DirectoryService.searchServiceRequest.serviceName)
}
#endif
inline void searchServiceRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477DirectoryService.searchServiceRequest.serviceName)
}
inline void searchServiceRequest::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477DirectoryService.searchServiceRequest.serviceName)
}
inline ::std::string* searchServiceRequest::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.searchServiceRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* searchServiceRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.searchServiceRequest.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchServiceRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:E477DirectoryService.searchServiceRequest.serviceName)
}

// -------------------------------------------------------------------

// deleteServiceRequest

// string serviceName = 1;
inline void deleteServiceRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deleteServiceRequest::servicename() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.deleteServiceRequest.serviceName)
  return servicename_.GetNoArena();
}
inline void deleteServiceRequest::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477DirectoryService.deleteServiceRequest.serviceName)
}
#if LANG_CXX11
inline void deleteServiceRequest::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477DirectoryService.deleteServiceRequest.serviceName)
}
#endif
inline void deleteServiceRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477DirectoryService.deleteServiceRequest.serviceName)
}
inline void deleteServiceRequest::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477DirectoryService.deleteServiceRequest.serviceName)
}
inline ::std::string* deleteServiceRequest::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.deleteServiceRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deleteServiceRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.deleteServiceRequest.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deleteServiceRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:E477DirectoryService.deleteServiceRequest.serviceName)
}

// -------------------------------------------------------------------

// DSResponse

// uint32 magic = 1;
inline void DSResponse::clear_magic() {
  magic_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::magic() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.magic)
  return magic_;
}
inline void DSResponse::set_magic(::google::protobuf::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSResponse.magic)
}

// uint32 version = 2;
inline void DSResponse::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::version() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.version)
  return version_;
}
inline void DSResponse::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSResponse.version)
}

// uint32 serial = 3;
inline void DSResponse::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 DSResponse::serial() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.serial)
  return serial_;
}
inline void DSResponse::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.DSResponse.serial)
}

// .E477DirectoryService.registerServiceResponse registerServiceRes = 4;
inline bool DSResponse::has_registerserviceres() const {
  return function_case() == kRegisterServiceRes;
}
inline void DSResponse::set_has_registerserviceres() {
  _oneof_case_[0] = kRegisterServiceRes;
}
inline void DSResponse::clear_registerserviceres() {
  if (has_registerserviceres()) {
    delete function_.registerserviceres_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::registerServiceResponse& DSResponse::_internal_registerserviceres() const {
  return *function_.registerserviceres_;
}
inline ::E477DirectoryService::registerServiceResponse* DSResponse::release_registerserviceres() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSResponse.registerServiceRes)
  if (has_registerserviceres()) {
    clear_has_function();
      ::E477DirectoryService::registerServiceResponse* temp = function_.registerserviceres_;
    function_.registerserviceres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::registerServiceResponse& DSResponse::registerserviceres() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.registerServiceRes)
  return has_registerserviceres()
      ? *function_.registerserviceres_
      : *reinterpret_cast< ::E477DirectoryService::registerServiceResponse*>(&::E477DirectoryService::_registerServiceResponse_default_instance_);
}
inline ::E477DirectoryService::registerServiceResponse* DSResponse::mutable_registerserviceres() {
  if (!has_registerserviceres()) {
    clear_function();
    set_has_registerserviceres();
    function_.registerserviceres_ = CreateMaybeMessage< ::E477DirectoryService::registerServiceResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSResponse.registerServiceRes)
  return function_.registerserviceres_;
}

// .E477DirectoryService.searchServiceResponse searchServiceRes = 5;
inline bool DSResponse::has_searchserviceres() const {
  return function_case() == kSearchServiceRes;
}
inline void DSResponse::set_has_searchserviceres() {
  _oneof_case_[0] = kSearchServiceRes;
}
inline void DSResponse::clear_searchserviceres() {
  if (has_searchserviceres()) {
    delete function_.searchserviceres_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::searchServiceResponse& DSResponse::_internal_searchserviceres() const {
  return *function_.searchserviceres_;
}
inline ::E477DirectoryService::searchServiceResponse* DSResponse::release_searchserviceres() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSResponse.searchServiceRes)
  if (has_searchserviceres()) {
    clear_has_function();
      ::E477DirectoryService::searchServiceResponse* temp = function_.searchserviceres_;
    function_.searchserviceres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::searchServiceResponse& DSResponse::searchserviceres() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.searchServiceRes)
  return has_searchserviceres()
      ? *function_.searchserviceres_
      : *reinterpret_cast< ::E477DirectoryService::searchServiceResponse*>(&::E477DirectoryService::_searchServiceResponse_default_instance_);
}
inline ::E477DirectoryService::searchServiceResponse* DSResponse::mutable_searchserviceres() {
  if (!has_searchserviceres()) {
    clear_function();
    set_has_searchserviceres();
    function_.searchserviceres_ = CreateMaybeMessage< ::E477DirectoryService::searchServiceResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSResponse.searchServiceRes)
  return function_.searchserviceres_;
}

// .E477DirectoryService.deleteServiceResponse deleteServiceRes = 6;
inline bool DSResponse::has_deleteserviceres() const {
  return function_case() == kDeleteServiceRes;
}
inline void DSResponse::set_has_deleteserviceres() {
  _oneof_case_[0] = kDeleteServiceRes;
}
inline void DSResponse::clear_deleteserviceres() {
  if (has_deleteserviceres()) {
    delete function_.deleteserviceres_;
    clear_has_function();
  }
}
inline const ::E477DirectoryService::deleteServiceResponse& DSResponse::_internal_deleteserviceres() const {
  return *function_.deleteserviceres_;
}
inline ::E477DirectoryService::deleteServiceResponse* DSResponse::release_deleteserviceres() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.DSResponse.deleteServiceRes)
  if (has_deleteserviceres()) {
    clear_has_function();
      ::E477DirectoryService::deleteServiceResponse* temp = function_.deleteserviceres_;
    function_.deleteserviceres_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477DirectoryService::deleteServiceResponse& DSResponse::deleteserviceres() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.DSResponse.deleteServiceRes)
  return has_deleteserviceres()
      ? *function_.deleteserviceres_
      : *reinterpret_cast< ::E477DirectoryService::deleteServiceResponse*>(&::E477DirectoryService::_deleteServiceResponse_default_instance_);
}
inline ::E477DirectoryService::deleteServiceResponse* DSResponse::mutable_deleteserviceres() {
  if (!has_deleteserviceres()) {
    clear_function();
    set_has_deleteserviceres();
    function_.deleteserviceres_ = CreateMaybeMessage< ::E477DirectoryService::deleteServiceResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.DSResponse.deleteServiceRes)
  return function_.deleteserviceres_;
}

inline bool DSResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void DSResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline DSResponse::FunctionCase DSResponse::function_case() const {
  return DSResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerServiceResponse

// bool success = 1;
inline void registerServiceResponse::clear_success() {
  success_ = false;
}
inline bool registerServiceResponse::success() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.registerServiceResponse.success)
  return success_;
}
inline void registerServiceResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.registerServiceResponse.success)
}

// -------------------------------------------------------------------

// searchServiceResponse

// bool found = 1;
inline void searchServiceResponse::clear_found() {
  found_ = false;
}
inline bool searchServiceResponse::found() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.searchServiceResponse.found)
  return found_;
}
inline void searchServiceResponse::set_found(bool value) {
  
  found_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.searchServiceResponse.found)
}

// string serverName = 2;
inline void searchServiceResponse::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& searchServiceResponse::servername() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.searchServiceResponse.serverName)
  return servername_.GetNoArena();
}
inline void searchServiceResponse::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477DirectoryService.searchServiceResponse.serverName)
}
#if LANG_CXX11
inline void searchServiceResponse::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477DirectoryService.searchServiceResponse.serverName)
}
#endif
inline void searchServiceResponse::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477DirectoryService.searchServiceResponse.serverName)
}
inline void searchServiceResponse::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477DirectoryService.searchServiceResponse.serverName)
}
inline ::std::string* searchServiceResponse::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:E477DirectoryService.searchServiceResponse.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* searchServiceResponse::release_servername() {
  // @@protoc_insertion_point(field_release:E477DirectoryService.searchServiceResponse.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void searchServiceResponse::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:E477DirectoryService.searchServiceResponse.serverName)
}

// int32 port = 3;
inline void searchServiceResponse::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 searchServiceResponse::port() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.searchServiceResponse.port)
  return port_;
}
inline void searchServiceResponse::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.searchServiceResponse.port)
}

// -------------------------------------------------------------------

// deleteServiceResponse

// bool success = 1;
inline void deleteServiceResponse::clear_success() {
  success_ = false;
}
inline bool deleteServiceResponse::success() const {
  // @@protoc_insertion_point(field_get:E477DirectoryService.deleteServiceResponse.success)
  return success_;
}
inline void deleteServiceResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:E477DirectoryService.deleteServiceResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace E477DirectoryService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_E477DirectoryService_2eproto
