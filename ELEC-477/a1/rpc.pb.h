// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_INCLUDED_rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_2eproto 

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_2eproto
namespace RPC {
class kvGetRequest;
class kvGetRequestDefaultTypeInternal;
extern kvGetRequestDefaultTypeInternal _kvGetRequest_default_instance_;
class kvGetResponse;
class kvGetResponseDefaultTypeInternal;
extern kvGetResponseDefaultTypeInternal _kvGetResponse_default_instance_;
class kvPutRequest;
class kvPutRequestDefaultTypeInternal;
extern kvPutRequestDefaultTypeInternal _kvPutRequest_default_instance_;
class kvPutResponse;
class kvPutResponseDefaultTypeInternal;
extern kvPutResponseDefaultTypeInternal _kvPutResponse_default_instance_;
class rpcHeader;
class rpcHeaderDefaultTypeInternal;
extern rpcHeaderDefaultTypeInternal _rpcHeader_default_instance_;
}  // namespace RPC
namespace google {
namespace protobuf {
template<> ::RPC::kvGetRequest* Arena::CreateMaybeMessage<::RPC::kvGetRequest>(Arena*);
template<> ::RPC::kvGetResponse* Arena::CreateMaybeMessage<::RPC::kvGetResponse>(Arena*);
template<> ::RPC::kvPutRequest* Arena::CreateMaybeMessage<::RPC::kvPutRequest>(Arena*);
template<> ::RPC::kvPutResponse* Arena::CreateMaybeMessage<::RPC::kvPutResponse>(Arena*);
template<> ::RPC::rpcHeader* Arena::CreateMaybeMessage<::RPC::rpcHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace RPC {

// ===================================================================

class rpcHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.rpcHeader) */ {
 public:
  rpcHeader();
  virtual ~rpcHeader();

  rpcHeader(const rpcHeader& from);

  inline rpcHeader& operator=(const rpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rpcHeader(rpcHeader&& from) noexcept
    : rpcHeader() {
    *this = ::std::move(from);
  }

  inline rpcHeader& operator=(rpcHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rpcHeader& default_instance();

  enum MessageCase {
    kPutRequest = 3,
    kPutResponse = 4,
    kGetRequest = 5,
    kGetResponse = 6,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpcHeader* internal_default_instance() {
    return reinterpret_cast<const rpcHeader*>(
               &_rpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(rpcHeader* other);
  friend void swap(rpcHeader& a, rpcHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rpcHeader* New() const final {
    return CreateMaybeMessage<rpcHeader>(NULL);
  }

  rpcHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rpcHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rpcHeader& from);
  void MergeFrom(const rpcHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpcHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 magic_number = 1;
  void clear_magic_number();
  static const int kMagicNumberFieldNumber = 1;
  ::google::protobuf::int32 magic_number() const;
  void set_magic_number(::google::protobuf::int32 value);

  // int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // .RPC.kvPutRequest put_request = 3;
  bool has_put_request() const;
  void clear_put_request();
  static const int kPutRequestFieldNumber = 3;
  private:
  const ::RPC::kvPutRequest& _internal_put_request() const;
  public:
  const ::RPC::kvPutRequest& put_request() const;
  ::RPC::kvPutRequest* release_put_request();
  ::RPC::kvPutRequest* mutable_put_request();
  void set_allocated_put_request(::RPC::kvPutRequest* put_request);

  // .RPC.kvPutResponse put_response = 4;
  bool has_put_response() const;
  void clear_put_response();
  static const int kPutResponseFieldNumber = 4;
  private:
  const ::RPC::kvPutResponse& _internal_put_response() const;
  public:
  const ::RPC::kvPutResponse& put_response() const;
  ::RPC::kvPutResponse* release_put_response();
  ::RPC::kvPutResponse* mutable_put_response();
  void set_allocated_put_response(::RPC::kvPutResponse* put_response);

  // .RPC.kvGetRequest get_request = 5;
  bool has_get_request() const;
  void clear_get_request();
  static const int kGetRequestFieldNumber = 5;
  private:
  const ::RPC::kvGetRequest& _internal_get_request() const;
  public:
  const ::RPC::kvGetRequest& get_request() const;
  ::RPC::kvGetRequest* release_get_request();
  ::RPC::kvGetRequest* mutable_get_request();
  void set_allocated_get_request(::RPC::kvGetRequest* get_request);

  // .RPC.kvGetResponse get_response = 6;
  bool has_get_response() const;
  void clear_get_response();
  static const int kGetResponseFieldNumber = 6;
  private:
  const ::RPC::kvGetResponse& _internal_get_response() const;
  public:
  const ::RPC::kvGetResponse& get_response() const;
  ::RPC::kvGetResponse* release_get_response();
  ::RPC::kvGetResponse* mutable_get_response();
  void set_allocated_get_response(::RPC::kvGetResponse* get_response);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:RPC.rpcHeader)
 private:
  void set_has_put_request();
  void set_has_put_response();
  void set_has_get_request();
  void set_has_get_response();

  inline bool has_message() const;
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 magic_number_;
  ::google::protobuf::int32 version_;
  union MessageUnion {
    MessageUnion() {}
    ::RPC::kvPutRequest* put_request_;
    ::RPC::kvPutResponse* put_response_;
    ::RPC::kvGetRequest* get_request_;
    ::RPC::kvGetResponse* get_response_;
  } message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kvPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.kvPutRequest) */ {
 public:
  kvPutRequest();
  virtual ~kvPutRequest();

  kvPutRequest(const kvPutRequest& from);

  inline kvPutRequest& operator=(const kvPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvPutRequest(kvPutRequest&& from) noexcept
    : kvPutRequest() {
    *this = ::std::move(from);
  }

  inline kvPutRequest& operator=(kvPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvPutRequest* internal_default_instance() {
    return reinterpret_cast<const kvPutRequest*>(
               &_kvPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(kvPutRequest* other);
  friend void swap(kvPutRequest& a, kvPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvPutRequest* New() const final {
    return CreateMaybeMessage<kvPutRequest>(NULL);
  }

  kvPutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvPutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvPutRequest& from);
  void MergeFrom(const kvPutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // uint32 value_len = 3;
  void clear_value_len();
  static const int kValueLenFieldNumber = 3;
  ::google::protobuf::uint32 value_len() const;
  void set_value_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RPC.kvPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::uint32 value_len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kvPutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.kvPutResponse) */ {
 public:
  kvPutResponse();
  virtual ~kvPutResponse();

  kvPutResponse(const kvPutResponse& from);

  inline kvPutResponse& operator=(const kvPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvPutResponse(kvPutResponse&& from) noexcept
    : kvPutResponse() {
    *this = ::std::move(from);
  }

  inline kvPutResponse& operator=(kvPutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvPutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvPutResponse* internal_default_instance() {
    return reinterpret_cast<const kvPutResponse*>(
               &_kvPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(kvPutResponse* other);
  friend void swap(kvPutResponse& a, kvPutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvPutResponse* New() const final {
    return CreateMaybeMessage<kvPutResponse>(NULL);
  }

  kvPutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvPutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvPutResponse& from);
  void MergeFrom(const kvPutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:RPC.kvPutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kvGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.kvGetRequest) */ {
 public:
  kvGetRequest();
  virtual ~kvGetRequest();

  kvGetRequest(const kvGetRequest& from);

  inline kvGetRequest& operator=(const kvGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvGetRequest(kvGetRequest&& from) noexcept
    : kvGetRequest() {
    *this = ::std::move(from);
  }

  inline kvGetRequest& operator=(kvGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvGetRequest* internal_default_instance() {
    return reinterpret_cast<const kvGetRequest*>(
               &_kvGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(kvGetRequest* other);
  friend void swap(kvGetRequest& a, kvGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvGetRequest* New() const final {
    return CreateMaybeMessage<kvGetRequest>(NULL);
  }

  kvGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvGetRequest& from);
  void MergeFrom(const kvGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RPC.kvGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kvGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.kvGetResponse) */ {
 public:
  kvGetResponse();
  virtual ~kvGetResponse();

  kvGetResponse(const kvGetResponse& from);

  inline kvGetResponse& operator=(const kvGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  kvGetResponse(kvGetResponse&& from) noexcept
    : kvGetResponse() {
    *this = ::std::move(from);
  }

  inline kvGetResponse& operator=(kvGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const kvGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvGetResponse* internal_default_instance() {
    return reinterpret_cast<const kvGetResponse*>(
               &_kvGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(kvGetResponse* other);
  friend void swap(kvGetResponse& a, kvGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline kvGetResponse* New() const final {
    return CreateMaybeMessage<kvGetResponse>(NULL);
  }

  kvGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<kvGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const kvGetResponse& from);
  void MergeFrom(const kvGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // uint32 value_len = 3;
  void clear_value_len();
  static const int kValueLenFieldNumber = 3;
  ::google::protobuf::uint32 value_len() const;
  void set_value_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RPC.kvGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool status_;
  ::google::protobuf::uint32 value_len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rpcHeader

// int32 magic_number = 1;
inline void rpcHeader::clear_magic_number() {
  magic_number_ = 0;
}
inline ::google::protobuf::int32 rpcHeader::magic_number() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.magic_number)
  return magic_number_;
}
inline void rpcHeader::set_magic_number(::google::protobuf::int32 value) {
  
  magic_number_ = value;
  // @@protoc_insertion_point(field_set:RPC.rpcHeader.magic_number)
}

// int32 version = 2;
inline void rpcHeader::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 rpcHeader::version() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.version)
  return version_;
}
inline void rpcHeader::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:RPC.rpcHeader.version)
}

// .RPC.kvPutRequest put_request = 3;
inline bool rpcHeader::has_put_request() const {
  return message_case() == kPutRequest;
}
inline void rpcHeader::set_has_put_request() {
  _oneof_case_[0] = kPutRequest;
}
inline void rpcHeader::clear_put_request() {
  if (has_put_request()) {
    delete message_.put_request_;
    clear_has_message();
  }
}
inline const ::RPC::kvPutRequest& rpcHeader::_internal_put_request() const {
  return *message_.put_request_;
}
inline ::RPC::kvPutRequest* rpcHeader::release_put_request() {
  // @@protoc_insertion_point(field_release:RPC.rpcHeader.put_request)
  if (has_put_request()) {
    clear_has_message();
      ::RPC::kvPutRequest* temp = message_.put_request_;
    message_.put_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::kvPutRequest& rpcHeader::put_request() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.put_request)
  return has_put_request()
      ? *message_.put_request_
      : *reinterpret_cast< ::RPC::kvPutRequest*>(&::RPC::_kvPutRequest_default_instance_);
}
inline ::RPC::kvPutRequest* rpcHeader::mutable_put_request() {
  if (!has_put_request()) {
    clear_message();
    set_has_put_request();
    message_.put_request_ = CreateMaybeMessage< ::RPC::kvPutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.rpcHeader.put_request)
  return message_.put_request_;
}

// .RPC.kvPutResponse put_response = 4;
inline bool rpcHeader::has_put_response() const {
  return message_case() == kPutResponse;
}
inline void rpcHeader::set_has_put_response() {
  _oneof_case_[0] = kPutResponse;
}
inline void rpcHeader::clear_put_response() {
  if (has_put_response()) {
    delete message_.put_response_;
    clear_has_message();
  }
}
inline const ::RPC::kvPutResponse& rpcHeader::_internal_put_response() const {
  return *message_.put_response_;
}
inline ::RPC::kvPutResponse* rpcHeader::release_put_response() {
  // @@protoc_insertion_point(field_release:RPC.rpcHeader.put_response)
  if (has_put_response()) {
    clear_has_message();
      ::RPC::kvPutResponse* temp = message_.put_response_;
    message_.put_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::kvPutResponse& rpcHeader::put_response() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.put_response)
  return has_put_response()
      ? *message_.put_response_
      : *reinterpret_cast< ::RPC::kvPutResponse*>(&::RPC::_kvPutResponse_default_instance_);
}
inline ::RPC::kvPutResponse* rpcHeader::mutable_put_response() {
  if (!has_put_response()) {
    clear_message();
    set_has_put_response();
    message_.put_response_ = CreateMaybeMessage< ::RPC::kvPutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.rpcHeader.put_response)
  return message_.put_response_;
}

// .RPC.kvGetRequest get_request = 5;
inline bool rpcHeader::has_get_request() const {
  return message_case() == kGetRequest;
}
inline void rpcHeader::set_has_get_request() {
  _oneof_case_[0] = kGetRequest;
}
inline void rpcHeader::clear_get_request() {
  if (has_get_request()) {
    delete message_.get_request_;
    clear_has_message();
  }
}
inline const ::RPC::kvGetRequest& rpcHeader::_internal_get_request() const {
  return *message_.get_request_;
}
inline ::RPC::kvGetRequest* rpcHeader::release_get_request() {
  // @@protoc_insertion_point(field_release:RPC.rpcHeader.get_request)
  if (has_get_request()) {
    clear_has_message();
      ::RPC::kvGetRequest* temp = message_.get_request_;
    message_.get_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::kvGetRequest& rpcHeader::get_request() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.get_request)
  return has_get_request()
      ? *message_.get_request_
      : *reinterpret_cast< ::RPC::kvGetRequest*>(&::RPC::_kvGetRequest_default_instance_);
}
inline ::RPC::kvGetRequest* rpcHeader::mutable_get_request() {
  if (!has_get_request()) {
    clear_message();
    set_has_get_request();
    message_.get_request_ = CreateMaybeMessage< ::RPC::kvGetRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.rpcHeader.get_request)
  return message_.get_request_;
}

// .RPC.kvGetResponse get_response = 6;
inline bool rpcHeader::has_get_response() const {
  return message_case() == kGetResponse;
}
inline void rpcHeader::set_has_get_response() {
  _oneof_case_[0] = kGetResponse;
}
inline void rpcHeader::clear_get_response() {
  if (has_get_response()) {
    delete message_.get_response_;
    clear_has_message();
  }
}
inline const ::RPC::kvGetResponse& rpcHeader::_internal_get_response() const {
  return *message_.get_response_;
}
inline ::RPC::kvGetResponse* rpcHeader::release_get_response() {
  // @@protoc_insertion_point(field_release:RPC.rpcHeader.get_response)
  if (has_get_response()) {
    clear_has_message();
      ::RPC::kvGetResponse* temp = message_.get_response_;
    message_.get_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::kvGetResponse& rpcHeader::get_response() const {
  // @@protoc_insertion_point(field_get:RPC.rpcHeader.get_response)
  return has_get_response()
      ? *message_.get_response_
      : *reinterpret_cast< ::RPC::kvGetResponse*>(&::RPC::_kvGetResponse_default_instance_);
}
inline ::RPC::kvGetResponse* rpcHeader::mutable_get_response() {
  if (!has_get_response()) {
    clear_message();
    set_has_get_response();
    message_.get_response_ = CreateMaybeMessage< ::RPC::kvGetResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.rpcHeader.get_response)
  return message_.get_response_;
}

inline bool rpcHeader::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void rpcHeader::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline rpcHeader::MessageCase rpcHeader::message_case() const {
  return rpcHeader::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// kvPutRequest

// int32 key = 1;
inline void kvPutRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 kvPutRequest::key() const {
  // @@protoc_insertion_point(field_get:RPC.kvPutRequest.key)
  return key_;
}
inline void kvPutRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvPutRequest.key)
}

// string value = 2;
inline void kvPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kvPutRequest::value() const {
  // @@protoc_insertion_point(field_get:RPC.kvPutRequest.value)
  return value_.GetNoArena();
}
inline void kvPutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPC.kvPutRequest.value)
}
#if LANG_CXX11
inline void kvPutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPC.kvPutRequest.value)
}
#endif
inline void kvPutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPC.kvPutRequest.value)
}
inline void kvPutRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPC.kvPutRequest.value)
}
inline ::std::string* kvPutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:RPC.kvPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kvPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:RPC.kvPutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kvPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:RPC.kvPutRequest.value)
}

// uint32 value_len = 3;
inline void kvPutRequest::clear_value_len() {
  value_len_ = 0u;
}
inline ::google::protobuf::uint32 kvPutRequest::value_len() const {
  // @@protoc_insertion_point(field_get:RPC.kvPutRequest.value_len)
  return value_len_;
}
inline void kvPutRequest::set_value_len(::google::protobuf::uint32 value) {
  
  value_len_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvPutRequest.value_len)
}

// -------------------------------------------------------------------

// kvPutResponse

// bool status = 1;
inline void kvPutResponse::clear_status() {
  status_ = false;
}
inline bool kvPutResponse::status() const {
  // @@protoc_insertion_point(field_get:RPC.kvPutResponse.status)
  return status_;
}
inline void kvPutResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvPutResponse.status)
}

// -------------------------------------------------------------------

// kvGetRequest

// int32 key = 1;
inline void kvGetRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 kvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:RPC.kvGetRequest.key)
  return key_;
}
inline void kvGetRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvGetRequest.key)
}

// -------------------------------------------------------------------

// kvGetResponse

// bool status = 1;
inline void kvGetResponse::clear_status() {
  status_ = false;
}
inline bool kvGetResponse::status() const {
  // @@protoc_insertion_point(field_get:RPC.kvGetResponse.status)
  return status_;
}
inline void kvGetResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvGetResponse.status)
}

// string value = 2;
inline void kvGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& kvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:RPC.kvGetResponse.value)
  return value_.GetNoArena();
}
inline void kvGetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPC.kvGetResponse.value)
}
#if LANG_CXX11
inline void kvGetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPC.kvGetResponse.value)
}
#endif
inline void kvGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPC.kvGetResponse.value)
}
inline void kvGetResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPC.kvGetResponse.value)
}
inline ::std::string* kvGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:RPC.kvGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:RPC.kvGetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kvGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:RPC.kvGetResponse.value)
}

// uint32 value_len = 3;
inline void kvGetResponse::clear_value_len() {
  value_len_ = 0u;
}
inline ::google::protobuf::uint32 kvGetResponse::value_len() const {
  // @@protoc_insertion_point(field_get:RPC.kvGetResponse.value_len)
  return value_len_;
}
inline void kvGetResponse::set_value_len(::google::protobuf::uint32 value) {
  
  value_len_ = value;
  // @@protoc_insertion_point(field_set:RPC.kvGetResponse.value_len)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_2eproto
